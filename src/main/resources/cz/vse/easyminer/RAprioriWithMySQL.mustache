{{!
@param String         jdbcDriverAbsolutePath
@param String         dbServer
@param String         dbName
@param String         dbUser
@param String         dbPassword
@param String         dbTableName
@param String         selectQuery
@param Double         confidence
@param Double         support
@param Double         lift
@param Integer        limit
@param String         consequent
@param Integer        maxlen
@param Boolean        cba
}}
library(RJDBC)
library(arules)
library(rCBA)

# load data from mysql
drv <- JDBC("com.mysql.jdbc.Driver", list.files("{{jdbcDriverAbsolutePath}}", pattern="jar$",full.names=T))
con <- dbConnect(drv, "jdbc:mysql://{{{dbServer}}}:3306/{{{dbName}}}?characterEncoding=utf8", "{{{dbUser}}}", "{{{dbPassword}}}")
train <- dbGetQuery(con, "SELECT {{{selectQuery}}} FROM `{{{dbTableName}}}`")
dbDisconnect(con)

# normalize data
train <- sapply(train,as.factor)
train <- data.frame(train, check.names=F)

# arules processing
txns <- as(train,"transactions")
rules <- apriori(txns, parameter = list(confidence = {{{confidence}}}, support = {{{support}}}{{#maxlen}}, maxlen = {{{maxlen}}}{{/maxlen}}), appearance = list(rhs = c({{{consequent}}}), default="lhs"))
{{#lift}}
rules <- subset(rules, subset = lift >= {{{lift}}})
{{/lift}}
rules <- as(rules,"data.frame")
if(nrow(rules) > 0) {
{{#cba}}
rules <- pruning(train, rules, method="m2cba")
{{/cba}}
{{#limit}}
{{^cba}}
rules <- rules[with(rules, order(-confidence, -support)), ]
{{/cba}}
rules <- head(rules, {{{limit}}})
{{/limit}}
}

options(width=10000)
options(max.print=1000000)
capture.output(print(rules))