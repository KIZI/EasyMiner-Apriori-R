{
   "swagger":"2.0",
   "info":{
      "description":"This is a RESTful service for finding association rules by using the R-apriori library. Input is a PMML with information about database, antecedent, consequent and interest measures; output is another PMML with found association rules. Data are mined from a MySQL table.",
      "version":"1.0",
      "title":"EasyMiner-Apriori-R",
      "contact":{
         "name":"prozeman@gmail.com"
      }
   },
   "host":"{{{host}}}",
   "basePath":"/api/v1",
   "schemes":[
      "http"
   ],
   "paths":{
      "/mine":{
         "post":{
            "summary":"Create a mining task by some PMML definition",
            "description":"",
            "consumes":[
               "application/xml"
            ],
            "produces":[
               "application/xml"
            ],
            "parameters":[
               {
                  "in":"body",
                  "name":"body",
                  "description":"PMML definition",
                  "required":true
               }
            ],
            "responses":{
               "202":{
                  "description":"Task was accepted and is in progress.",
                  "schema": {  
                     "$ref": "#/definitions/Status"
                  },
                  "headers":[
                     {
                        "type":"string",
                        "description":"Location: {address-with-result}"
                     }
                  ]
               },
               "500":{
                  "description":"Bad input data or the task was not created.",
                  "schema": {  
                     "$ref": "#/definitions/Error"
                  }
               }
            }
         }
      },
      "/result/{taskId}":{
         "get":{
            "summary":"Return some result of the mining task.",
            "produces":[
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"taskId",
                  "in":"path",
                  "description":"task ID",
                  "required":true,
                  "type":"string"
               }
            ],
            "responses":{
               "202":{
                  "description":"Task is still in progress.",
                  "schema": {  
                     "$ref": "#/definitions/Status"
                  }
               },
               "200":{
                  "description":"Task has been finished. It returns the PMML result."
               },
               "404":{
                  "description":"Task is not exist or has been picked up.",
                  "schema": {  
                     "$ref": "#/definitions/Error"
                  }
               },
               "500":{
                  "description":"Some error during mining.",
                  "schema": {  
                     "$ref": "#/definitions/Error"
                  }
               }
            }
         }
      }
   },
   "definitions": {
      "Status": {
         "required":[  
            "code",
            "miner"
         ],
         "properties": {
            "code": {
               "type": "string"
            },
            "miner": {
               "$ref":"MinerState"
            }
         },
         "xml": {
            "name": "Status"
         }
      },
      "MinerState": {
         "required":[  
            "state",
            "task-id"
         ],
         "properties": {
            "state": {
               "type": "string"
            },
            "task-id": {
               "type": "string"
            },
            "started": {
               "type": "string"
            },
            "result-url": {
               "type": "string"
            }
         },
         "xml": {
            "name": "MinerState"
         }
      },
      "Error": {
         "required":[  
            "code",
            "name",
            "message"
         ],
         "properties": {
            "code": {
               "type": "integer"
            },
            "name": {
               "type": "string"
            },
            "message": {
               "type": "string"
            }
         },
         "xml": {
            "name": "Error"
         }
      }
   }
}